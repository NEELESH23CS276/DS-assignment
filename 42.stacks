#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100  // Maximum size of the stack

// Structure to represent the stack
typedef struct {
    int array[MAX_SIZE];  // Array to store stack elements
    int top;              // Index of the top element (-1 means stack is empty)
} Stack;

// Function to initialize a new stack
Stack* create_stack() {
    Stack* stack = (Stack*)malloc(sizeof(Stack));
    stack->top = -1;  // Initialize top to -1 (empty stack)
    return stack;
}

// Function to check if the stack is empty
int is_empty(Stack* stack) {
    return stack->top == -1;
}

// Function to check if the stack is full
int is_full(Stack* stack) {
    return stack->top == MAX_SIZE - 1;
}

// Function to push an element onto the stack
void push(Stack* stack, int value) {
    if (is_full(stack)) {
        printf("Stack Overflow: Cannot push into a full stack\n");
        return;
    }
    stack->top++;
    stack->array[stack->top] = value;
}

// Function to pop an element from the stack
int pop(Stack* stack) {
    if (is_empty(stack)) {
        printf("Stack Underflow: Cannot pop from an empty stack\n");
        return -1;  // Return -1 or some other error value
    }
    int popped_value = stack->array[stack->top];
    stack->top--;
    return popped_value;
}

// Function to return the top element of the stack without removing it
int peek(Stack* stack) {
    if (is_empty(stack)) {
        printf("Stack is empty\n");
        return -1;  // Return -1 or some other error value
    }
    return stack->array[stack->top];
}

// Main function to test the stack implementation
int main() {
    Stack* stack = create_stack();

    printf("Pushing elements onto the stack:\n");
    push(stack, 1);
    push(stack, 2);
    push(stack, 3);
    push(stack, 4);
    push(stack, 5);

    printf("Current stack size: %d\n", stack->top + 1);
    printf("Top element of the stack: %d\n", peek(stack));

    printf("\nPopping elements from the stack:\n");
    printf("%d\n", pop(stack));  // 5
    printf("%d\n", pop(stack));  // 4

    printf("\nCurrent stack size: %d\n", stack->top + 1);
    printf("Top element of the stack: %d\n", peek(stack));

    printf("\nPushing more elements onto the stack:\n");
    push(stack, 6);
    push(stack, 7);

    printf("\nCurrent stack size: %d\n", stack->top + 1);
    printf("Top element of the stack: %d\n", peek(stack));

    printf("\nPopping all elements from the stack:\n");
    while (!is_empty(stack)) {
        printf("%d\n", pop(stack));
    }

    printf("\nCurrent stack size: %d\n", stack->top + 1);
    printf("Is the stack empty? %s\n", is_empty(stack) ? "Yes" : "No");

    // Free the memory allocated for the stack
    free(stack);

    return 0;
}
