#include <stdio.h>
#include <stdlib.h>

// Structure for a node in the stack
typedef struct Node {
    int data;           // Data of the node (integer in this case)
    struct Node* next;  // Pointer to the next node in the stack
} Node;

// Structure to represent the stack
typedef struct {
    Node* top;  // Pointer to the top of the stack
} Stack;

// Function to initialize a new stack
Stack* create_stack() {
    Stack* stack = (Stack*)malloc(sizeof(Stack));
    stack->top = NULL;  // Initialize top to NULL (empty stack)
    return stack;
}

// Function to check if the stack is empty
int is_empty(Stack* stack) {
    return stack->top == NULL;
}

// Function to push an element onto the stack
void push(Stack* stack, int value) {
    // Create a new node for the element
    Node* new_node = (Node*)malloc(sizeof(Node));
    new_node->data = value;
    new_node->next = stack->top;  // Point the new node to the current top
    stack->top = new_node;        // Update the top to the new node
}

// Function to pop an element from the stack
int pop(Stack* stack) {
    if (is_empty(stack)) {
        printf("Stack Underflow: Cannot pop from an empty stack\n");
        return -1;  // Return -1 or some other error value
    }

    Node* temp = stack->top;     // Get the current top node
    int popped_value = temp->data;  // Get the data of the top node
    stack->top = temp->next;     // Update the top to the next node
    free(temp);                  // Free the memory of the popped node
    return popped_value;         // Return the popped value
}

// Function to return the top element of the stack without removing it
int peek(Stack* stack) {
    if (is_empty(stack)) {
        printf("Stack is empty\n");
        return -1;  // Return -1 or some other error value
    }
    return stack->top->data;  // Return the data of the top node
}

// Main function to test the stack implementation
int main() {
    Stack* stack = create_stack();

    printf("Pushing elements onto the stack:\n");
    push(stack, 1);
    push(stack, 2);
    push(stack, 3);
    push(stack, 4);
    push(stack, 5);

    printf("Current stack size: %s\n", is_empty(stack) ? "Empty" : "Non-empty");
    printf("Top element of the stack: %d\n", peek(stack));

    printf("\nPopping elements from the stack:\n");
    printf("%d\n", pop(stack));  // 5
    printf("%d\n", pop(stack));  // 4

    printf("\nCurrent stack size: %s\n", is_empty(stack) ? "Empty" : "Non-empty");
    printf("Top element of the stack: %d\n", peek(stack));

    printf("\nPopping all elements from the stack:\n");
    while (!is_empty(stack)) {
        printf("%d\n", pop(stack));
    }

    printf("\nCurrent stack size: %s\n", is_empty(stack) ? "Empty" : "Non-empty");

    // Free the memory allocated for the stack
    free(stack);

    return 0;
}
